PARSER_BEGIN(Compilador)

public class Compilador
{
  public static void main(String args[]) throws ParseException, TokenMgrError
  {
    Compilador parser = new Compilador(System.in);

    parser.Inicio();
  }
}

PARSER_END(Compilador)


/*
  Por padrão, JavaCC analisa o código no estado DEFAULT.
  As regras de TOKEN, SKIP e MORE são definidas somente para este estado.
  Quando dentro de `MORE: `, temos uma regra, como `"/*": IN_GENERAL_COMMENT`, isso significa que,
quando o JAVACC ler `/*` do código, ele irá para o estado `IN_GENERAL_COMMENT`.
  Dessa forma, precisamos definir as regras que serão válidas neste estado. Para este exemplo, as
regras são definidas dentro de: `< IN_GENERAL_COMMENT > TOKEN:` e `< IN_GENERAL_COMMENT > MORE:`.
  `< IN_GENERAL_COMMENT > TOKEN:` nos diz que quando um caractere lido casar com alguma regra
definida lá dentro, haverá uma criação de um token, e a transição de volta ao estado DEFAULT.
  `< IN_GENERAL_COMMENT > MORE:` nos diz que quando um caractere lido casar com alguma regra
definida lá dentro, ele será pulado, mas fará parte do próximo token a ser criado.
*/
< IN_GENERAL_COMMENT > SPECIAL_TOKEN:
{
  < TOKEN_GENERAL_COMMENT: "*/" > : DEFAULT
}

< IN_GENERAL_COMMENT > MORE:
{
  < ~[] >
}

MORE:
{
  "/*": IN_GENERAL_COMMENT
}


SKIP:
{
  /** Espaços em Branco */
  < TOKEN_SPACE: " " >
|
  < TOKEN_HORIZONTAL_TAB: "\t" >
|
  < TOKEN_CARRIAGE_RETURN: "\r" >
|
  < TOKEN_NEWLINE: "\n" >
}


TOKEN:
{
  /** Tipos */
  < TOKEN_bool: "bool" >
|
  < TOKEN_i8: "i8" >
|
  < TOKEN_i16: "i16" >
|
  < TOKEN_i32: "i32" >
|
  < TOKEN_i64: "i64" >
|
  < TOKEN_i128: "i128" >
|
  < TOKEN_u8: "u8" >
|
  < TOKEN_u16: "u16" >
|
  < TOKEN_u32: "u32" >
|
  < TOKEN_u64: "u64" >
|
  < TOKEN_u128: "u128" >
|
  < TOKEN_f32: "f32" >
|
  < TOKEN_f64: "f64" >
|
  < TOKEN_char: "char" >
|
  < TOKEN_str: "str" >
|
  /** Palavras-Chave */
  < TOKEN_as: "as" >
|
  < TOKEN_async: "async" >
|
  < TOKEN_await: "await" >
|
  < TOKEN_break: "break" >
|
  < TOKEN_const: "const" >
|
  < TOKEN_continue: "continue" >
|
  < TOKEN_crate: "crate" >
|
  < TOKEN_dyn: "dyn" >
|
  < TOKEN_else: "else" >
|
  < TOKEN_enum: "enum" >
|
  < TOKEN_extern: "extern" >
|
  < TOKEN_false: "false" >
|
  < TOKEN_fn: "fn" >
|
  < TOKEN_for: "for" >
|
  < TOKEN_if: "if" >
|
  < TOKEN_impl: "impl" >
|
  < TOKEN_in: "in" >
|
  < TOKEN_let: "let" >
|
  < TOKEN_loop: "loop" >
|
  < TOKEN_match: "match" >
|
  < TOKEN_mod: "mod" >
|
  < TOKEN_move: "move" >
|
  < TOKEN_mut: "mut" >
|
  < TOKEN_pub: "pub" >
|
  < TOKEN_ref: "ref" >
|
  < TOKEN_return: "return" >
|
  < TOKEN_self: "self" >
|
  < TOKEN_Self: "Self" >
|
  < TOKEN_static: "static" >
|
  < TOKEN_struct: "struct" >
|
  < TOKEN_super: "super" >
|
  < TOKEN_trait: "trait" >
|
  < TOKEN_true: "true" >
|
  < TOKEN_type: "type" >
|
  < TOKEN_unsafe: "unsafe" >
|
  < TOKEN_use: "use" >
|
  < TOKEN_where: "where" >
|
  < TOKEN_while: "while" >
|
  /** Caracteres */
  < #TOKEN_XID_START: ["A"-"Z", "a"-"z"] >
|
  < #TOKEN_XID_CONTINUE: ["A"-"Z", "a"-"z", "0"-"9"] >
|
  /** Digitos */
  < #TOKEN_BINARY_DIGIT: "0" | "1" >
|
  < #TOKEN_OCTAL_DIGIT: ["0"-"7"] >
|
  < #TOKEN_DECIMAL_DIGIT: ["0"-"9"] >
|
  < #TOKEN_HEX_DIGIT: ["0"-"9", "A"-"F", "a"-"f"] >
|
  /** Operadores */
  < TOKEN_ARROW: "->" >
|
  < TOKEN_PLUS_ASSIGN: "+=" >
|
  < TOKEN_PLUS: "+" >
|
  < TOKEN_MINUS_ASSIGN: "-=" >
|
  < TOKEN_MINUS: "-" >
|
  < TOKEN_MULTIPLY_ASSIGN: "*=" >
|
  < TOKEN_MULTIPLY: "*" >
|
  < TOKEN_DIVIDE_ASSIGN: "/=" >
|
  < TOKEN_DIVIDE: "/" >
|
  < TOKEN_REMAINDER_ASSIGN: "%=" >
|
  < TOKEN_REMAINDER: "%" >
|
  < TOKEN_OR: "||" >
|
  < TOKEN_BIT_OR_ASSIGN: "|=" >
|
  < TOKEN_BIT_OR: "|" >
|
  < TOKEN_AND: "&&" >
|
  < TOKEN_BIT_AND_ASSIGN: "&=" >
|
  < TOKEN_BIT_AND: "&" >
|
  < TOKEN_BIT_XOR_ASSIGN: "^=" >
|
  < TOKEN_BIT_XOR: "^" >
|
  < TOKEN_COMMA: "," >
|
  < TOKEN_DOT_DOT_ASSIGN: "..=" >
|
  < TOKEN_DOT_DOT: ".." >
|
  < TOKEN_DOT: "." >
|
  < TOKEN_COLON: ":" >
|
  < TOKEN_SEMICOLON: ";" >
|
  < TOKEN_LEFT_SHIFT_ASSIGN: "<<=" >
|
  < TOKEN_LEFT_SHIFT: "<<" >
|
  < TOKEN_RIGHT_SHIFT_ASSIGN: ">>=" >
|
  < TOKEN_RIGHT_SHIFT: ">>" >
|
  < TOKEN_LESS_EQUAL: "<=" >
|
  < TOKEN_LESS: "<" >
|
  < TOKEN_GREATER_EQUAL: ">=" >
|
  < TOKEN_GREATER: ">" >
|
  < TOKEN_DIFFERENT: "!=" >
|
  < TOKEN_NOT: "!" >
|
  < TOKEN_EQUAL: "==" >
|
  < TOKEN_ASSIGN: "=" >
|
  < TOKEN_PARENTHESIS_OP: "(" >
|
  < TOKEN_PARENTHESIS_CL: ")" >
|
  < TOKEN_BRACKET_OP: "[" >
|
  < TOKEN_BRACKET_CL: "]" >
|
  < TOKEN_CURLY_OP: "{" >
|
  < TOKEN_CURLY_CL: "}" >
|
  < TOKEN_QUESTION: "?" >
|
  < TOKEN_AT: "@" >
|
  < TOKEN_TILDE: "~" >
|
  /** Números */
  < TOKEN_FLOAT_LITERAL: < TOKEN_DECIMAL_FLOAT_LITERAL > >
|
  < #TOKEN_DECIMAL_EXPONENT: ("e" | "E") ("+" | "-")? ("_" | < TOKEN_DECIMAL_DIGIT > )*< TOKEN_DECIMAL_DIGIT > ("_" | < TOKEN_DECIMAL_DIGIT > )* >
|
  < #TOKEN_DECIMAL_FLOAT_LITERAL: < TOKEN_DECIMAL_LITERAL > "." | < TOKEN_DECIMAL_LITERAL > "." < TOKEN_DECIMAL_LITERAL > | < TOKEN_DECIMAL_LITERAL > ("." < TOKEN_DECIMAL_LITERAL > )? < TOKEN_DECIMAL_EXPONENT > >
|
  < TOKEN_INT_LITERAL: < TOKEN_BINARY_LITERAL > | < TOKEN_OCTAL_LITERAL > | < TOKEN_DECIMAL_LITERAL > | < TOKEN_HEX_LITERAL > >
|
  < #TOKEN_BINARY_LITERAL: "0" ("b" | "B") ("_" | < TOKEN_BINARY_DIGIT > )* >
|
  < #TOKEN_OCTAL_LITERAL: "0" ("o" | "O")? ("_" | < TOKEN_OCTAL_DIGIT > )* >
|
  < #TOKEN_DECIMAL_LITERAL: "0" | ( ["1"-"9"] ("_" | < TOKEN_DECIMAL_DIGIT > )* ) >
|
  < #TOKEN_HEX_LITERAL: "0" ("x" | "X") ("_" | < TOKEN_HEX_DIGIT > )*  >
|
  /** Strings */
  < #TOKEN_QUOTE_ESCAPE: "\\\'" | "\\\"" >
|
  < #TOKEN_ASCII_ESCAPE: "\\x" < TOKEN_OCTAL_DIGIT > < TOKEN_HEX_DIGIT > | "\\n" | "\\r" | "\\t" | "\\\\" | "\\0" >
|
  < TOKEN_CHAR_LITERAL: "'" (~["\'", "\\", "\n", "\r", "\t"] | < TOKEN_QUOTE_ESCAPE > | < TOKEN_ASCII_ESCAPE > )"'" >
|
  < TOKEN_STRING_LITERAL: "\"" (~["\"", "\\"] | < TOKEN_QUOTE_ESCAPE > | < TOKEN_ASCII_ESCAPE >)* "\"" >
|
  /** Identificadores */
  < TOKEN_ID: < TOKEN_XID_START > ( < TOKEN_XID_CONTINUE > )* | "_" < TOKEN_XID_CONTINUE > ( < TOKEN_XID_CONTINUE > )* >
}


SPECIAL_TOKEN:
{
  /** Comentários */
  < TOKEN_LINE_COMMENT: "//" (~["\n", "\r"])* >
}


void Inicio():
{
  Token t;
}
{
  (
    t = < TOKEN_bool >
    {
      System.out.println("TOKEN_bool " + t.image);
    }

    |

    t = < TOKEN_i8 >
    {
      System.out.println("TOKEN_i8 " + t.image);
    }

    |

    t = < TOKEN_i16 >
    {
      System.out.println("TOKEN_i16 " + t.image);
    }

    |

    t = < TOKEN_i32 >
    {
      System.out.println("TOKEN_i32 " + t.image);
    }

    |

    t = < TOKEN_i64 >
    {
      System.out.println("TOKEN_i64 " + t.image);
    }

    |

    t = < TOKEN_i128 >
    {
      System.out.println("TOKEN_i128 " + t.image);
    }

    |

    t = < TOKEN_u8 >
    {
      System.out.println("TOKEN_u8 " + t.image);
    }

    |

    t = < TOKEN_u16 >
    {
      System.out.println("TOKEN_u16 " + t.image);
    }

    |

    t = < TOKEN_u32 >
    {
      System.out.println("TOKEN_u32 " + t.image);
    }

    |

    t = < TOKEN_u64 >
    {
      System.out.println("TOKEN_u64 " + t.image);
    }

    |

    t = < TOKEN_u128 >
    {
      System.out.println("TOKEN_u128 " + t.image);
    }

    |

    t = < TOKEN_f32 >
    {
      System.out.println("TOKEN_f32 " + t.image);
    }

    |

    t = < TOKEN_f64 >
    {
      System.out.println("TOKEN_f64 " + t.image);
    }

    |

    t = < TOKEN_char >
    {
      System.out.println("TOKEN_char " + t.image);
    }

    |

    t = < TOKEN_str >
    {
      System.out.println("TOKEN_str " + t.image);
    }

    |

    t = < TOKEN_as >
    {
      System.out.println("TOKEN_as " + t.image);
    }

    |

    t = < TOKEN_async >
    {
      System.out.println("TOKEN_async " + t.image);
    }

    |

    t = < TOKEN_await >
    {
      System.out.println("TOKEN_await " + t.image);
    }

    |

    t = < TOKEN_break >
    {
      System.out.println("TOKEN_break " + t.image);
    }

    |

    t = < TOKEN_const >
    {
      System.out.println("TOKEN_const " + t.image);
    }

    |

    t = < TOKEN_continue >
    {
      System.out.println("TOKEN_continue " + t.image);
    }

    |

    t = < TOKEN_crate >
    {
      System.out.println("TOKEN_crate " + t.image);
    }

    |

    t = < TOKEN_dyn >
    {
      System.out.println("TOKEN_dyn " + t.image);
    }

    |

    t = < TOKEN_else >
    {
      System.out.println("TOKEN_else " + t.image);
    }

    |

    t = < TOKEN_enum >
    {
      System.out.println("TOKEN_enum " + t.image);
    }

    |

    t = < TOKEN_extern >
    {
      System.out.println("TOKEN_extern " + t.image);
    }

    |

    t = < TOKEN_false >
    {
      System.out.println("TOKEN_false " + t.image);
    }

    |

    t = < TOKEN_fn >
    {
      System.out.println("TOKEN_fn " + t.image);
    }

    |

    t = < TOKEN_for >
    {
      System.out.println("TOKEN_for " + t.image);
    }

    |

    t = < TOKEN_if >
    {
      System.out.println("TOKEN_if " + t.image);
    }

    |

    t = < TOKEN_impl >
    {
      System.out.println("TOKEN_impl " + t.image);
    }

    |

    t = < TOKEN_in >
    {
      System.out.println("TOKEN_in " + t.image);
    }

    |

    t = < TOKEN_let >
    {
      System.out.println("TOKEN_let " + t.image);
    }

    |

    t = < TOKEN_loop >
    {
      System.out.println("TOKEN_loop " + t.image);
    }

    |

    t = < TOKEN_match >
    {
      System.out.println("TOKEN_match " + t.image);
    }

    |

    t = < TOKEN_mod >
    {
      System.out.println("TOKEN_mod " + t.image);
    }

    |

    t = < TOKEN_move >
    {
      System.out.println("TOKEN_move " + t.image);
    }

    |

    t = < TOKEN_mut >
    {
      System.out.println("TOKEN_mut " + t.image);
    }

    |

    t = < TOKEN_pub >
    {
      System.out.println("TOKEN_pub " + t.image);
    }

    |

    t = < TOKEN_ref >
    {
      System.out.println("TOKEN_ref " + t.image);
    }

    |

    t = < TOKEN_return >
    {
      System.out.println("TOKEN_return " + t.image);
    }

    |

    t = < TOKEN_self >
    {
      System.out.println("TOKEN_self " + t.image);
    }

    |

    t = < TOKEN_Self >
    {
      System.out.println("TOKEN_Self " + t.image);
    }

    |

    t = < TOKEN_static >
    {
      System.out.println("TOKEN_static " + t.image);
    }

    |

    t = < TOKEN_struct >
    {
      System.out.println("TOKEN_struct " + t.image);
    }

    |

    t = < TOKEN_super >
    {
      System.out.println("TOKEN_super " + t.image);
    }

    |

    t = < TOKEN_trait >
    {
      System.out.println("TOKEN_trait " + t.image);
    }

    |

    t = < TOKEN_true >
    {
      System.out.println("TOKEN_true " + t.image);
    }

    |

    t = < TOKEN_type >
    {
      System.out.println("TOKEN_type " + t.image);
    }

    |

    t = < TOKEN_unsafe >
    {
      System.out.println("TOKEN_unsafe " + t.image);
    }

    |

    t = < TOKEN_use >
    {
      System.out.println("TOKEN_use " + t.image);
    }

    |

    t = < TOKEN_where >
    {
      System.out.println("TOKEN_where " + t.image);
    }

    |

    t = < TOKEN_while >
    {
      System.out.println("TOKEN_while " + t.image);
    }

    |

    t = < TOKEN_ARROW >
    {
      System.out.println("TOKEN_ARROW " + t.image);
    }

    |

    t = < TOKEN_PLUS_ASSIGN >
    {
      System.out.println("TOKEN_PLUS_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_PLUS >
    {
      System.out.println("TOKEN_PLUS " + t.image);
    }

    |

    t = < TOKEN_MINUS_ASSIGN >
    {
      System.out.println("TOKEN_MINUS_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_MINUS >
    {
      System.out.println("TOKEN_MINUS " + t.image);
    }

    |

    t = < TOKEN_MULTIPLY_ASSIGN >
    {
      System.out.println("TOKEN_MULTIPLY_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_MULTIPLY >
    {
      System.out.println("TOKEN_MULTIPLY " + t.image);
    }

    |

    t = < TOKEN_DIVIDE_ASSIGN >
    {
      System.out.println("TOKEN_DIVIDE_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_DIVIDE >
    {
      System.out.println("TOKEN_DIVIDE " + t.image);
    }

    |

    t = < TOKEN_REMAINDER_ASSIGN >
    {
      System.out.println("TOKEN_REMAINDER_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_REMAINDER >
    {
      System.out.println("TOKEN_REMAINDER " + t.image);
    }

    |

    t = < TOKEN_OR >
    {
      System.out.println("TOKEN_OR " + t.image);
    }

    |

    t = < TOKEN_BIT_OR_ASSIGN >
    {
      System.out.println("TOKEN_BIT_OR_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_BIT_OR >
    {
      System.out.println("TOKEN_BIT_OR " + t.image);
    }

    |

    t = < TOKEN_AND >
    {
      System.out.println("TOKEN_AND " + t.image);
    }

    |

    t = < TOKEN_BIT_AND_ASSIGN >
    {
      System.out.println("TOKEN_BIT_AND_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_BIT_AND >
    {
      System.out.println("TOKEN_BIT_AND " + t.image);
    }

    |

    t = < TOKEN_BIT_XOR_ASSIGN >
    {
      System.out.println("TOKEN_BIT_XOR_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_BIT_XOR >
    {
      System.out.println("TOKEN_BIT_XOR " + t.image);
    }

    |

    t = < TOKEN_COMMA >
    {
      System.out.println("TOKEN_COMMA " + t.image);
    }

    |

    t = < TOKEN_DOT_DOT_ASSIGN >
    {
      System.out.println("TOKEN_DOT_DOT_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_DOT_DOT >
    {
      System.out.println("TOKEN_DOT_DOT " + t.image);
    }

    |

    t = < TOKEN_DOT >
    {
      System.out.println("TOKEN_DOT " + t.image);
    }

    |

    t = < TOKEN_COLON >
    {
      System.out.println("TOKEN_COLON " + t.image);
    }

    |

    t = < TOKEN_SEMICOLON >
    {
      System.out.println("TOKEN_SEMICOLON " + t.image);
    }

    |

    t = < TOKEN_LEFT_SHIFT_ASSIGN >
    {
      System.out.println("TOKEN_LEFT_SHIFT_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_LEFT_SHIFT >
    {
      System.out.println("TOKEN_LEFT_SHIFT " + t.image);
    }

    |

    t = < TOKEN_RIGHT_SHIFT_ASSIGN >
    {
      System.out.println("TOKEN_RIGHT_SHIFT_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_RIGHT_SHIFT >
    {
      System.out.println("TOKEN_RIGHT_SHIFT " + t.image);
    }

    |

    t = < TOKEN_LESS_EQUAL >
    {
      System.out.println("TOKEN_LESS_EQUAL " + t.image);
    }

    |

    t = < TOKEN_LESS >
    {
      System.out.println("TOKEN_LESS " + t.image);
    }

    |

    t = < TOKEN_GREATER_EQUAL >
    {
      System.out.println("TOKEN_GREATER_EQUAL " + t.image);
    }

    |

    t = < TOKEN_GREATER >
    {
      System.out.println("TOKEN_GREATER " + t.image);
    }

    |

    t = < TOKEN_DIFFERENT >
    {
      System.out.println("TOKEN_DIFFERENT " + t.image);
    }

    |

    t = < TOKEN_NOT >
    {
      System.out.println("TOKEN_NOT " + t.image);
    }

    |

    t = < TOKEN_EQUAL >
    {
      System.out.println("TOKEN_EQUAL " + t.image);
    }

    |

    t = < TOKEN_ASSIGN >
    {
      System.out.println("TOKEN_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_PARENTHESIS_OP >
    {
      System.out.println("TOKEN_PARENTHESIS_OP " + t.image);
    }

    |

    t = < TOKEN_PARENTHESIS_CL >
    {
      System.out.println("TOKEN_PARENTHESIS_CL " + t.image);
    }

    |

    t = < TOKEN_BRACKET_OP >
    {
      System.out.println("TOKEN_BRACKET_OP " + t.image);
    }

    |

    t = < TOKEN_BRACKET_CL >
    {
      System.out.println("TOKEN_BRACKET_CL " + t.image);
    }

    |

    t = < TOKEN_CURLY_OP >
    {
      System.out.println("TOKEN_CURLY_OP " + t.image);
    }

    |

    t = < TOKEN_CURLY_CL >
    {
      System.out.println("TOKEN_CURLY_CL " + t.image);
    }

    |

    t = < TOKEN_QUESTION >
    {
      System.out.println("TOKEN_QUESTION " + t.image);
    }

    |

    t = < TOKEN_AT >
    {
      System.out.println("TOKEN_AT " + t.image);
    }

    |

    t = < TOKEN_TILDE >
    {
      System.out.println("TOKEN_TILDE " + t.image);
    }

    |

    t = < TOKEN_FLOAT_LITERAL >
    {
      System.out.println("TOKEN_FLOAT_LITERAL " + t.image);
    }

    |

    t = < TOKEN_INT_LITERAL >
    {
      System.out.println("TOKEN_INT_LITERAL " + t.image);
    }

    |

    t = < TOKEN_CHAR_LITERAL >
    {
      System.out.println("TOKEN_CHAR_LITERAL " + t.image);
    }

    |

    t = < TOKEN_STRING_LITERAL >
    {
      System.out.println("TOKEN_STRING_LITERAL " + t.image);
    }

    |

    t = < TOKEN_ID >
    {
      System.out.println("TOKEN_ID " + t.image);
    }
  )*

  < EOF >
}
