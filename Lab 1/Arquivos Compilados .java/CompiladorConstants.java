/* Generated By:JavaCC: Do not edit this line. CompiladorConstants.java */

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CompiladorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int TOKEN_GENERAL_COMMENT = 1;
  /** RegularExpression Id. */
  int TOKEN_SPACE = 4;
  /** RegularExpression Id. */
  int TOKEN_HORIZONTAL_TAB = 5;
  /** RegularExpression Id. */
  int TOKEN_CARRIAGE_RETURN = 6;
  /** RegularExpression Id. */
  int TOKEN_NEWLINE = 7;
  /** RegularExpression Id. */
  int TOKEN_bool = 8;
  /** RegularExpression Id. */
  int TOKEN_i8 = 9;
  /** RegularExpression Id. */
  int TOKEN_i16 = 10;
  /** RegularExpression Id. */
  int TOKEN_i32 = 11;
  /** RegularExpression Id. */
  int TOKEN_i64 = 12;
  /** RegularExpression Id. */
  int TOKEN_i128 = 13;
  /** RegularExpression Id. */
  int TOKEN_u8 = 14;
  /** RegularExpression Id. */
  int TOKEN_u16 = 15;
  /** RegularExpression Id. */
  int TOKEN_u32 = 16;
  /** RegularExpression Id. */
  int TOKEN_u64 = 17;
  /** RegularExpression Id. */
  int TOKEN_u128 = 18;
  /** RegularExpression Id. */
  int TOKEN_f32 = 19;
  /** RegularExpression Id. */
  int TOKEN_f64 = 20;
  /** RegularExpression Id. */
  int TOKEN_char = 21;
  /** RegularExpression Id. */
  int TOKEN_str = 22;
  /** RegularExpression Id. */
  int TOKEN_as = 23;
  /** RegularExpression Id. */
  int TOKEN_async = 24;
  /** RegularExpression Id. */
  int TOKEN_await = 25;
  /** RegularExpression Id. */
  int TOKEN_break = 26;
  /** RegularExpression Id. */
  int TOKEN_const = 27;
  /** RegularExpression Id. */
  int TOKEN_continue = 28;
  /** RegularExpression Id. */
  int TOKEN_crate = 29;
  /** RegularExpression Id. */
  int TOKEN_dyn = 30;
  /** RegularExpression Id. */
  int TOKEN_else = 31;
  /** RegularExpression Id. */
  int TOKEN_enum = 32;
  /** RegularExpression Id. */
  int TOKEN_extern = 33;
  /** RegularExpression Id. */
  int TOKEN_false = 34;
  /** RegularExpression Id. */
  int TOKEN_fn = 35;
  /** RegularExpression Id. */
  int TOKEN_for = 36;
  /** RegularExpression Id. */
  int TOKEN_if = 37;
  /** RegularExpression Id. */
  int TOKEN_impl = 38;
  /** RegularExpression Id. */
  int TOKEN_in = 39;
  /** RegularExpression Id. */
  int TOKEN_let = 40;
  /** RegularExpression Id. */
  int TOKEN_loop = 41;
  /** RegularExpression Id. */
  int TOKEN_match = 42;
  /** RegularExpression Id. */
  int TOKEN_mod = 43;
  /** RegularExpression Id. */
  int TOKEN_move = 44;
  /** RegularExpression Id. */
  int TOKEN_mut = 45;
  /** RegularExpression Id. */
  int TOKEN_pub = 46;
  /** RegularExpression Id. */
  int TOKEN_ref = 47;
  /** RegularExpression Id. */
  int TOKEN_return = 48;
  /** RegularExpression Id. */
  int TOKEN_self = 49;
  /** RegularExpression Id. */
  int TOKEN_Self = 50;
  /** RegularExpression Id. */
  int TOKEN_static = 51;
  /** RegularExpression Id. */
  int TOKEN_struct = 52;
  /** RegularExpression Id. */
  int TOKEN_super = 53;
  /** RegularExpression Id. */
  int TOKEN_trait = 54;
  /** RegularExpression Id. */
  int TOKEN_true = 55;
  /** RegularExpression Id. */
  int TOKEN_type = 56;
  /** RegularExpression Id. */
  int TOKEN_unsafe = 57;
  /** RegularExpression Id. */
  int TOKEN_use = 58;
  /** RegularExpression Id. */
  int TOKEN_where = 59;
  /** RegularExpression Id. */
  int TOKEN_while = 60;
  /** RegularExpression Id. */
  int TOKEN_XID_START = 61;
  /** RegularExpression Id. */
  int TOKEN_XID_CONTINUE = 62;
  /** RegularExpression Id. */
  int TOKEN_BINARY_DIGIT = 63;
  /** RegularExpression Id. */
  int TOKEN_OCTAL_DIGIT = 64;
  /** RegularExpression Id. */
  int TOKEN_DECIMAL_DIGIT = 65;
  /** RegularExpression Id. */
  int TOKEN_HEX_DIGIT = 66;
  /** RegularExpression Id. */
  int TOKEN_ARROW = 67;
  /** RegularExpression Id. */
  int TOKEN_PLUS_ASSIGN = 68;
  /** RegularExpression Id. */
  int TOKEN_PLUS = 69;
  /** RegularExpression Id. */
  int TOKEN_MINUS_ASSIGN = 70;
  /** RegularExpression Id. */
  int TOKEN_MINUS = 71;
  /** RegularExpression Id. */
  int TOKEN_MULTIPLY_ASSIGN = 72;
  /** RegularExpression Id. */
  int TOKEN_MULTIPLY = 73;
  /** RegularExpression Id. */
  int TOKEN_DIVIDE_ASSIGN = 74;
  /** RegularExpression Id. */
  int TOKEN_DIVIDE = 75;
  /** RegularExpression Id. */
  int TOKEN_REMAINDER_ASSIGN = 76;
  /** RegularExpression Id. */
  int TOKEN_REMAINDER = 77;
  /** RegularExpression Id. */
  int TOKEN_OR = 78;
  /** RegularExpression Id. */
  int TOKEN_BIT_OR_ASSIGN = 79;
  /** RegularExpression Id. */
  int TOKEN_BIT_OR = 80;
  /** RegularExpression Id. */
  int TOKEN_AND = 81;
  /** RegularExpression Id. */
  int TOKEN_BIT_AND_ASSIGN = 82;
  /** RegularExpression Id. */
  int TOKEN_BIT_AND = 83;
  /** RegularExpression Id. */
  int TOKEN_BIT_XOR_ASSIGN = 84;
  /** RegularExpression Id. */
  int TOKEN_BIT_XOR = 85;
  /** RegularExpression Id. */
  int TOKEN_COMMA = 86;
  /** RegularExpression Id. */
  int TOKEN_DOT_DOT_ASSIGN = 87;
  /** RegularExpression Id. */
  int TOKEN_DOT_DOT = 88;
  /** RegularExpression Id. */
  int TOKEN_DOT = 89;
  /** RegularExpression Id. */
  int TOKEN_COLON = 90;
  /** RegularExpression Id. */
  int TOKEN_SEMICOLON = 91;
  /** RegularExpression Id. */
  int TOKEN_LEFT_SHIFT_ASSIGN = 92;
  /** RegularExpression Id. */
  int TOKEN_LEFT_SHIFT = 93;
  /** RegularExpression Id. */
  int TOKEN_RIGHT_SHIFT_ASSIGN = 94;
  /** RegularExpression Id. */
  int TOKEN_RIGHT_SHIFT = 95;
  /** RegularExpression Id. */
  int TOKEN_LESS_EQUAL = 96;
  /** RegularExpression Id. */
  int TOKEN_LESS = 97;
  /** RegularExpression Id. */
  int TOKEN_GREATER_EQUAL = 98;
  /** RegularExpression Id. */
  int TOKEN_GREATER = 99;
  /** RegularExpression Id. */
  int TOKEN_DIFFERENT = 100;
  /** RegularExpression Id. */
  int TOKEN_NOT = 101;
  /** RegularExpression Id. */
  int TOKEN_EQUAL = 102;
  /** RegularExpression Id. */
  int TOKEN_ASSIGN = 103;
  /** RegularExpression Id. */
  int TOKEN_PARENTHESIS_OP = 104;
  /** RegularExpression Id. */
  int TOKEN_PARENTHESIS_CL = 105;
  /** RegularExpression Id. */
  int TOKEN_BRACKET_OP = 106;
  /** RegularExpression Id. */
  int TOKEN_BRACKET_CL = 107;
  /** RegularExpression Id. */
  int TOKEN_CURLY_OP = 108;
  /** RegularExpression Id. */
  int TOKEN_CURLY_CL = 109;
  /** RegularExpression Id. */
  int TOKEN_QUESTION = 110;
  /** RegularExpression Id. */
  int TOKEN_AT = 111;
  /** RegularExpression Id. */
  int TOKEN_TILDE = 112;
  /** RegularExpression Id. */
  int TOKEN_FLOAT_LITERAL = 113;
  /** RegularExpression Id. */
  int TOKEN_DECIMAL_EXPONENT = 114;
  /** RegularExpression Id. */
  int TOKEN_DECIMAL_FLOAT_LITERAL = 115;
  /** RegularExpression Id. */
  int TOKEN_INT_LITERAL = 116;
  /** RegularExpression Id. */
  int TOKEN_BINARY_LITERAL = 117;
  /** RegularExpression Id. */
  int TOKEN_OCTAL_LITERAL = 118;
  /** RegularExpression Id. */
  int TOKEN_DECIMAL_LITERAL = 119;
  /** RegularExpression Id. */
  int TOKEN_HEX_LITERAL = 120;
  /** RegularExpression Id. */
  int TOKEN_QUOTE_ESCAPE = 121;
  /** RegularExpression Id. */
  int TOKEN_ASCII_ESCAPE = 122;
  /** RegularExpression Id. */
  int TOKEN_CHAR_LITERAL = 123;
  /** RegularExpression Id. */
  int TOKEN_STRING_LITERAL = 124;
  /** RegularExpression Id. */
  int TOKEN_ID = 125;
  /** RegularExpression Id. */
  int TOKEN_LINE_COMMENT = 126;

  /** Lexical state. */
  int IN_GENERAL_COMMENT = 0;
  /** Lexical state. */
  int DEFAULT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"*/\"",
    "<token of kind 2>",
    "\"/*\"",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"bool\"",
    "\"i8\"",
    "\"i16\"",
    "\"i32\"",
    "\"i64\"",
    "\"i128\"",
    "\"u8\"",
    "\"u16\"",
    "\"u32\"",
    "\"u64\"",
    "\"u128\"",
    "\"f32\"",
    "\"f64\"",
    "\"char\"",
    "\"str\"",
    "\"as\"",
    "\"async\"",
    "\"await\"",
    "\"break\"",
    "\"const\"",
    "\"continue\"",
    "\"crate\"",
    "\"dyn\"",
    "\"else\"",
    "\"enum\"",
    "\"extern\"",
    "\"false\"",
    "\"fn\"",
    "\"for\"",
    "\"if\"",
    "\"impl\"",
    "\"in\"",
    "\"let\"",
    "\"loop\"",
    "\"match\"",
    "\"mod\"",
    "\"move\"",
    "\"mut\"",
    "\"pub\"",
    "\"ref\"",
    "\"return\"",
    "\"self\"",
    "\"Self\"",
    "\"static\"",
    "\"struct\"",
    "\"super\"",
    "\"trait\"",
    "\"true\"",
    "\"type\"",
    "\"unsafe\"",
    "\"use\"",
    "\"where\"",
    "\"while\"",
    "<TOKEN_XID_START>",
    "<TOKEN_XID_CONTINUE>",
    "<TOKEN_BINARY_DIGIT>",
    "<TOKEN_OCTAL_DIGIT>",
    "<TOKEN_DECIMAL_DIGIT>",
    "<TOKEN_HEX_DIGIT>",
    "\"->\"",
    "\"+=\"",
    "\"+\"",
    "\"-=\"",
    "\"-\"",
    "\"*=\"",
    "\"*\"",
    "\"/=\"",
    "\"/\"",
    "\"%=\"",
    "\"%\"",
    "\"||\"",
    "\"|=\"",
    "\"|\"",
    "\"&&\"",
    "\"&=\"",
    "\"&\"",
    "\"^=\"",
    "\"^\"",
    "\",\"",
    "\"..=\"",
    "\"..\"",
    "\".\"",
    "\":\"",
    "\";\"",
    "\"<<=\"",
    "\"<<\"",
    "\">>=\"",
    "\">>\"",
    "\"<=\"",
    "\"<\"",
    "\">=\"",
    "\">\"",
    "\"!=\"",
    "\"!\"",
    "\"==\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"?\"",
    "\"@\"",
    "\"~\"",
    "<TOKEN_FLOAT_LITERAL>",
    "<TOKEN_DECIMAL_EXPONENT>",
    "<TOKEN_DECIMAL_FLOAT_LITERAL>",
    "<TOKEN_INT_LITERAL>",
    "<TOKEN_BINARY_LITERAL>",
    "<TOKEN_OCTAL_LITERAL>",
    "<TOKEN_DECIMAL_LITERAL>",
    "<TOKEN_HEX_LITERAL>",
    "<TOKEN_QUOTE_ESCAPE>",
    "<TOKEN_ASCII_ESCAPE>",
    "<TOKEN_CHAR_LITERAL>",
    "<TOKEN_STRING_LITERAL>",
    "<TOKEN_ID>",
    "<TOKEN_LINE_COMMENT>",
  };

}
