/* Generated By:JavaCC: Do not edit this line. CompiladorTokenManager.java */

/** Token Manager. */
public class CompiladorTokenManager implements CompiladorConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1fffffffffffff00L) != 0L)
         {
            jjmatchedKind = 125;
            return 29;
         }
         if ((active0 & 0x8L) != 0L || (active1 & 0xc00L) != 0L)
            return 32;
         return -1;
      case 1:
         if ((active0 & 0x1fffff57fe7fbd00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 125;
               jjmatchedPos = 1;
            }
            return 29;
         }
         if ((active0 & 0xa801804200L) != 0L)
            return 29;
         return -1;
      case 2:
         if ((active0 & 0x1bef1647bf242100L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 125;
               jjmatchedPos = 2;
            }
            return 29;
         }
         if ((active0 & 0x410e910405b9c00L) != 0L)
            return 29;
         return -1;
      case 3:
         if ((active0 & 0x1a7904063f000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 3;
            return 29;
         }
         if ((active0 & 0x186124180242100L) != 0L)
            return 29;
         return -1;
      case 4:
         if ((active0 & 0x219000210000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 4;
            return 29;
         }
         if ((active0 & 0x186004042f000000L) != 0L)
            return 29;
         return -1;
      case 5:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 5;
            return 29;
         }
         if ((active0 & 0x219000200000000L) != 0L)
            return 29;
         return -1;
      case 6:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 6;
            return 29;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1000000000L);
      case 37:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1000L);
      case 38:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x60000L);
      case 40:
         return jjStopAtPos(0, 104);
      case 41:
         return jjStopAtPos(0, 105);
      case 42:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x100L);
      case 43:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x10L);
      case 44:
         return jjStopAtPos(0, 86);
      case 45:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x48L);
      case 46:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1800000L);
      case 47:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_1(0x8L, 0x400L);
      case 58:
         return jjStopAtPos(0, 90);
      case 59:
         return jjStopAtPos(0, 91);
      case 60:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x130000000L);
      case 61:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x4000000000L);
      case 62:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x4c0000000L);
      case 63:
         return jjStopAtPos(0, 110);
      case 64:
         return jjStopAtPos(0, 111);
      case 83:
         return jjMoveStringLiteralDfa1_1(0x4000000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 106);
      case 93:
         return jjStopAtPos(0, 107);
      case 94:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x100000L);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x3800000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_1(0x4000100L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0x38200000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x40000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x380000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x1c00180000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0xe000003e00L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x30000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_1(0x3c0000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x400000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x1800000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x3a000000400000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x1c0000000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_1(0x60000000007c000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x1800000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 108);
      case 124:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_1(0x0L, 0xc000L);
      case 125:
         return jjStopAtPos(0, 109);
      case 126:
         return jjStopAtPos(0, 112);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         break;
      case 42:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      case 46:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x800000L);
      case 49:
         return jjMoveStringLiteralDfa2_1(active0, 0x4a400L, active1, 0L);
      case 51:
         return jjMoveStringLiteralDfa2_1(active0, 0x90800L, active1, 0L);
      case 54:
         return jjMoveStringLiteralDfa2_1(active0, 0x121000L, active1, 0L);
      case 56:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(1, 9, 29);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(1, 14, 29);
         break;
      case 60:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x10000000L);
      case 61:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         break;
      case 62:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x40000000L);
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x40400000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x7810000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 37, 29);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x1800000000200000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(1, 35, 29);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 39, 29);
         return jjMoveStringLiteralDfa2_1(active0, 0x200000100000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_1(active0, 0x1a1018000100L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0xc0000024000000L, active1, 0L);
      case 115:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x400000001000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0x18000000400000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x20600000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0x200000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_1(active0, 0x100000040000000L, active1, 0L);
      case 124:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(2, 11, 29);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(2, 16, 29);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(2, 19, 29);
         return jjMoveStringLiteralDfa3_1(active0, 0x42000L, active1, 0L);
      case 52:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(2, 12, 29);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(2, 17, 29);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(2, 20, 29);
         break;
      case 54:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(2, 10, 29);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(2, 15, 29);
         break;
      case 61:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(2, 87);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(2, 92);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 94);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x48000022200000L, active1, 0L);
      case 98:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 46, 29);
         break;
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 43, 29);
         break;
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 58, 29);
         return jjMoveStringLiteralDfa3_1(active0, 0x800000004000000L, active1, 0L);
      case 102:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 47, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x6000400000000L, active1, 0L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(2, 30, 29);
         return jjMoveStringLiteralDfa3_1(active0, 0x18000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000100L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x120004000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 36, 29);
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x200000080000000L, active1, 0L);
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 40, 29);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 45, 29);
         return jjMoveStringLiteralDfa3_1(active0, 0x1040200000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000100000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_1(active0, 0x100000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 56:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(3, 13, 29);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(3, 18, 29);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x200000004000000L);
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(3, 31, 29);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 44, 29);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 55, 29);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 56, 29);
         return jjMoveStringLiteralDfa4_1(active0, 0x20000200000000L);
      case 102:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 49, 29);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 50, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000002000000L);
      case 108:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(3, 8, 29);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 38, 29);
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000000000000L);
      case 109:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(3, 32, 29);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000L);
      case 112:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 41, 29);
         break;
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(3, 21, 29);
         return jjMoveStringLiteralDfa4_1(active0, 0x800000000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x408000000L);
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000030000000L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x11000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(4, 24, 29);
         return jjMoveStringLiteralDfa5_1(active0, 0x10000000000000L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(4, 29, 29);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(4, 34, 29);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 59, 29);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 60, 29);
         break;
      case 102:
         return jjMoveStringLiteralDfa5_1(active0, 0x200000000000000L);
      case 104:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 42, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x8000010000000L);
      case 107:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(4, 26, 29);
         break;
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 53, 29);
         return jjMoveStringLiteralDfa5_1(active0, 0x1000200000000L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(4, 25, 29);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(4, 27, 29);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 54, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_1(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 51, 29);
         break;
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 57, 29);
         break;
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(5, 33, 29);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 48, 29);
         return jjMoveStringLiteralDfa6_1(active0, 0x10000000L);
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 52, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_1(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa7_1(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(7, 28, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, active0, 0L);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_1(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 61;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(0, 7);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(8, 15);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 34)
                     jjCheckNAddStates(16, 18);
                  else if (curChar == 39)
                     jjAddStates(19, 20);
                  break;
               case 1:
                  if ((0xffffff7fffffd9ffL & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if (curChar == 39 && kind > 123)
                     kind = 123;
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAdd(2);
                  break;
               case 5:
                  if (curChar == 39)
                     jjCheckNAdd(2);
                  break;
               case 6:
                  if (curChar == 48)
                     jjCheckNAdd(2);
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 14:
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(16, 18);
                  break;
               case 15:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 16:
                  if (curChar == 34 && kind > 124)
                     kind = 124;
                  break;
               case 19:
                  if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  break;
               case 20:
                  if (curChar == 48)
                     jjCheckNAddStates(16, 18);
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 32:
                  if (curChar != 47)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 35:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddStates(0, 7);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if (curChar == 46 && kind > 113)
                     kind = 113;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if (curChar == 46)
                     jjAddStates(21, 22);
                  break;
               case 40:
                  if (curChar == 48 && kind > 113)
                     kind = 113;
                  break;
               case 41:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(42);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 44:
                  if (curChar == 46)
                     jjAddStates(26, 27);
                  break;
               case 45:
                  if (curChar == 48)
                     jjCheckNAdd(46);
                  break;
               case 47:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 46);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 46);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if (curChar != 48)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddStates(8, 15);
                  break;
               case 56:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(58);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjstateSet[jjnewStateCnt++] = 60;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 125)
                        kind = 125;
                     jjCheckNAdd(29);
                  }
                  else if (curChar == 95)
                     jjCheckNAdd(31);
                  break;
               case 1:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar == 92)
                     jjAddStates(28, 35);
                  break;
               case 7:
                  if (curChar == 92)
                     jjCheckNAdd(2);
                  break;
               case 8:
                  if (curChar == 116)
                     jjCheckNAdd(2);
                  break;
               case 9:
                  if (curChar == 114)
                     jjCheckNAdd(2);
                  break;
               case 10:
                  if (curChar == 110)
                     jjCheckNAdd(2);
                  break;
               case 11:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 13:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 15:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 17:
                  if (curChar == 92)
                     jjAddStates(36, 43);
                  break;
               case 21:
                  if (curChar == 92)
                     jjCheckNAddStates(16, 18);
                  break;
               case 22:
                  if (curChar == 116)
                     jjCheckNAddStates(16, 18);
                  break;
               case 23:
                  if (curChar == 114)
                     jjCheckNAddStates(16, 18);
                  break;
               case 24:
                  if (curChar == 110)
                     jjCheckNAddStates(16, 18);
                  break;
               case 25:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 27:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 28:
               case 29:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if (curChar == 95)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAdd(31);
                  break;
               case 33:
                  if (kind > 126)
                     kind = 126;
                  jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  if (curChar == 95)
                     jjAddStates(44, 45);
                  break;
               case 38:
                  if (curChar == 95)
                     jjAddStates(46, 47);
                  break;
               case 42:
                  if (curChar != 95)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 43:
                  if (curChar == 95)
                     jjCheckNAddStates(23, 25);
                  break;
               case 46:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(48, 50);
                  break;
               case 48:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if (curChar != 95)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(52, 46);
                  break;
               case 53:
                  if (curChar != 95)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if ((0x400000004L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(56);
                  break;
               case 56:
                  if (curChar != 95)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(56);
                  break;
               case 57:
                  if ((0x800000008000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(58);
                  break;
               case 58:
                  if (curChar != 95)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(58);
                  break;
               case 59:
                  if ((0x100000001000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x7e8000007eL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(60);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 15:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(16, 18);
                  break;
               case 33:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjstateSet[jjnewStateCnt++] = 33;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 61 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_0(0x2L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(1, 1);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   36, 37, 38, 39, 43, 44, 46, 53, 37, 39, 44, 46, 55, 57, 58, 59, 
   15, 16, 17, 1, 3, 40, 41, 43, 44, 46, 45, 51, 4, 5, 6, 7, 
   8, 9, 10, 11, 18, 19, 20, 21, 22, 23, 24, 25, 36, 37, 38, 39, 
   47, 48, 49, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
null, null, null, null, null, null, null, null, "\142\157\157\154", "\151\70", 
"\151\61\66", "\151\63\62", "\151\66\64", "\151\61\62\70", "\165\70", "\165\61\66", 
"\165\63\62", "\165\66\64", "\165\61\62\70", "\146\63\62", "\146\66\64", "\143\150\141\162", 
"\163\164\162", "\141\163", "\141\163\171\156\143", "\141\167\141\151\164", 
"\142\162\145\141\153", "\143\157\156\163\164", "\143\157\156\164\151\156\165\145", 
"\143\162\141\164\145", "\144\171\156", "\145\154\163\145", "\145\156\165\155", 
"\145\170\164\145\162\156", "\146\141\154\163\145", "\146\156", "\146\157\162", "\151\146", 
"\151\155\160\154", "\151\156", "\154\145\164", "\154\157\157\160", "\155\141\164\143\150", 
"\155\157\144", "\155\157\166\145", "\155\165\164", "\160\165\142", "\162\145\146", 
"\162\145\164\165\162\156", "\163\145\154\146", "\123\145\154\146", "\163\164\141\164\151\143", 
"\163\164\162\165\143\164", "\163\165\160\145\162", "\164\162\141\151\164", "\164\162\165\145", 
"\164\171\160\145", "\165\156\163\141\146\145", "\165\163\145", "\167\150\145\162\145", 
"\167\150\151\154\145", null, null, null, null, null, null, "\55\76", "\53\75", "\53", "\55\75", 
"\55", "\52\75", "\52", "\57\75", "\57", "\45\75", "\45", "\174\174", "\174\75", 
"\174", "\46\46", "\46\75", "\46", "\136\75", "\136", "\54", "\56\56\75", "\56\56", 
"\56", "\72", "\73", "\74\74\75", "\74\74", "\76\76\75", "\76\76", "\74\75", "\74", 
"\76\75", "\76", "\41\75", "\41", "\75\75", "\75", "\50", "\51", "\133", "\135", "\173", 
"\175", "\77", "\100", "\176", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "IN_GENERAL_COMMENT", 
   "DEFAULT", 
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, 1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, 
};
static final long[] jjtoToken = {
   0x1fffffffffffff01L, 0x3813fffffffffff8L, 
};
static final long[] jjtoSkip = {
   0xf2L, 0x4000000000000000L, 
};
static final long[] jjtoSpecial = {
   0x2L, 0x4000000000000000L, 
};
static final long[] jjtoMore = {
   0xcL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[61];
static private final int[] jjstateSet = new int[122];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public CompiladorTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public CompiladorTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 61; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 1;
static int defaultLexState = 1;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 2)
         {
            jjmatchedKind = 2;
         }
         break;
       case 1:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
